(load "unit-test.scm")

(define (square x)
  (* x x))

(define (factorize polynomial)
  (let ((exponent (car (cdr (cdr (car (cdr polynomial))))))
	(operand (car polynomial))
	(a (car (cdr (car (cdr polynomial)))))
	(b (car (cdr (car (cdr (cdr polynomial)))))))
    (if (equal? operand '-)
      (if (equal? exponent 2)
	`(* (- ,a ,b)
	    (+ ,a ,b))
	`(* (- ,a ,b)
	    (+ (square ,a)
	       (* ,a ,b)
	       (square ,b))))
      `(* (+ ,a ,b)
	  (+ (- (square ,a)
		(* ,a ,b))
	     (square ,b))))))

(define the-tests
  (list (test (factorize '(- (expt x 2) (expt y 2)))
	      (* (- x y) (+ x y)))
	(test (factorize '(- (expt (+ first 1) 2) (expt (- second 1) 2)))
	      (* (- (+ first 1) (- second 1)) (+ (+ first 1) (- second 1))))
	(test (eval (list (list 'lambda 
				'(x y)
				(factorize '(- (expt x 2) (expt y 2))))
			  1 2)
		    (interaction-environment)) 
	      -3)
	(test (factorize '(- (expt x 3) (expt y 3)))
			 (* (- x y) (+ (square x) (* x y) (square y))))
	(test (factorize '(+ (expt x 3) (expt y 3)))
			 (* (+ x y) (+ (- (square x) (* x y)) (square y))))))

(run-tests the-tests)
