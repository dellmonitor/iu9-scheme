(load "trace.scm")
(load "unit-test.scm")

(define (ref seq . args)
  (define (type x)
    (cond ((string? x) 'string)
	  ((vector? x) 'vector)
	  ((list? x) 'list)
	  ((number? x) 'number)))
  (define (convert seq)
    (cond ((string? seq) (string->list seq))
	  ((vector? seq) (vector->list seq))
	  ((list? seq) seq)))
  (define (reverse-convert seq type)
    (cond ((equal? 'string type) (list->string seq))
	  ((equal? 'vector type) (list->vector seq))
	  ((equal? 'list type) seq)))
  (define (find lst index)
    (if (= 0 index)
      (car lst)
      (find (cdr lst) (- index 1))))
  (define (insert lst elem index)
    (if (= 0 index)
      (cons elem lst)
      (cons (car lst) (insert (cdr lst) elem (- index 1)))))
  (let* ((type-of-seq (type seq))
	 (lst (convert seq))
	 (lst-len (length lst))
	 (args-len (length args)))
    (cond ((= args-len 1)
	   (and (>= (- lst-len 1) (car args)) 
		(find lst (car args))))
	  ((= args-len 2)
	   (let* ((index (car args))
		  (elem (car (cdr args)))
		  (type-of-elem (type elem)))
	     (write index)
	     (write lst-len)
	     (and (or (equal? type-of-seq 'list)
		      (equal? type-of-seq 'vector)
		      (equal? (type (car lst)) type-of-elem)) 
		  (>= (+ lst-len 1) index)
		  (reverse-convert (insert lst elem index) type-of-seq)))))))

(define test-find
  (list (test (ref '(1 2 3) 1) 2)
	(test (ref #(1 2 3) 1) 2)
	(test (ref "123" 1) #\2)
	(test (ref "123" 3) #f)))
(run-tests test-find)

(newline)

(define test-insert
  (list (test (ref '(1 2 3) 1 0) (1 0 2 3))
	(test (ref #(1 2 3) 1 0) #(1 0 2 3))
	(test (ref #(1 2 3) 1 #\0) #(1 #\0 2 3))
	(test (ref "123" 1 #\0) "1023")
	(test (ref "123" 1 0) #f)
	(test (ref "123" 3 #\4) "1234")
	(test (ref "123" 5 #\4) #f)))
(run-tests test-insert)
