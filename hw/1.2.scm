(define (square x)
  (* x x))

(define (square-equation a b c)
  (cond ((= 0 a b c) (list))
	((= 0 b c) (list 0))
	((= 0 a c) (list 0))
	((= 0 a b) (list))
	((= 0 a) (list (/ (- c) b)))
	((= 0 b) (if (> (/ (- c) a) 0)
		   (let ((first-root (sqrt (/ (- c) a)))
			 (second-root (- (sqrt (/ (- c) a)))))
			 (list (min first-root second-root) (max first-root second-root)))
		   (list)))
	((= 0 c) (list 0 (- (/ b a))))
	(else (let ((d (- (square b) (* 4 a c))))
		(cond ((= d 0) (list (/ (- b) (* 2 a))))
		      ((< d 0) (list))
		      (else (let ((first-root (/ (+ (- b) (sqrt d)) (* 2 a)))
				  (second-root (/ (- (- b) (sqrt d)) (* 2 a))))
				  (list (min first-root second-root) (max first-root second-root)))))))))
